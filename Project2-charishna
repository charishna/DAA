//minimum spanning tree
//importing libraries

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

//main class
public class projMST {
    //following is the definition of the subset
        static class subset_struct {
        int original, power;

        public subset_struct(int original, int power)
        {
            this.original = original;
            this.power = power;
        }
    }
    //following is the definition of the edges
    static class edges_struct {
        int src, d, wt;

        public edges_struct(int src, int d, int wt)
        {
            this.src = src;
            this.d = d;
            this.wt = wt;

        }
    }
    // main function
    public static void main(String[] args)
    {
        long start = System.nanoTime();
        int vertices = 8;
        List<edges_struct> graphEdges = new ArrayList<edges_struct>(
                List.of(new edges_struct(0, 1, 10), new edges_struct(0, 2, 6),
                        new edges_struct(4, 2, 7), new edges_struct(4, 1, 11),
                        new edges_struct(0, 3, 5), new edges_struct(1, 3, 15),
                        new edges_struct(6, 2, 1), new edges_struct(6, 3, 5),
                        new edges_struct(7, 5, 12), new edges_struct(7, 6, 7),
                        new edges_struct(5, 4, 3), new edges_struct(5, 0, 9),
                        new edges_struct(2, 3, 4)));

    //sorting the weights in increasing order (Kruskal's algorithm)
        graphEdges.sort(new Comparator<edges_struct>() {
            @Override public int compare(edges_struct c1, edges_struct c2)
            {
                return c1.wt - c2.wt;
            }
        });

        kruskals(vertices, graphEdges);
        long end = System.nanoTime();
        long timeSpent = end - start;
        System.out.println(timeSpent);
    }
    
    private static void kruskals(int vertices, List<edges_struct> edges)
    { // calculation of MST
        int q = 0;
        int edges_count = 0;

        subset_struct subsets[] = new subset_struct[vertices];

        edges_struct results[] = new edges_struct[vertices];

// creating 'q' number of subsets
        for (int i = 0; i < vertices; i++) {
            subsets[i] = new subset_struct(i, 0);
        }


        while (edges_count < vertices - 1) {

// picking the smallest edge
            edges_struct nextEdge = edges.get(q);
            int m = root(subsets, nextEdge.src);
            int n = root(subsets, nextEdge.d);

// the edge should not form a cycle

            if (m != n) {
                results[edges_count] = nextEdge;
                union(subsets, m, n);
                edges_count++;
            }

            q++;
        }
// displaying the results of the MST
        System.out.println(
                "edges:");
        int cost = 0;
        for (int i = 0; i < edges_count; i++) {
            System.out.println(results[i].src + " -- "
                    + results[i].d + " == "
                    + results[i].wt);
            cost += results[i].wt;
        }
        System.out.println("MST cost: " + cost);
    }
    // locating the original set
    private static int root(subset_struct[] subsets, int i)
    {
        if (subsets[i].original == i)
            return subsets[i].original;

        subsets[i].original
                = root(subsets, subsets[i].original);
        return subsets[i].original;
    }
    private static void union(subset_struct[] subsets, int x,
                              int y)
    {
        int rootX = root(subsets, x);
        int rootY = root(subsets, y);

        if (subsets[rootY].power < subsets[rootX].power) {
            subsets[rootY].original = rootX;
        }
        else if (subsets[rootX].power
                < subsets[rootY].power) {
            subsets[rootX].original = rootY;
        }
        else {
            subsets[rootY].original = rootX;
            subsets[rootX].power++;
        }
    }
}
